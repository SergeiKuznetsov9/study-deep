В этом уроке будем добавлять еще один язык, используя библиотеку i18n
npm install react-i18next i18next --save

Следуем гайду из документации, устанавливаем еще пару пакетов:

npm install i18next-http-backend i18next-browser-languagedetector --save

При настройке плагина у нас появится необхоимость получить в нем переменную isDev для включения/
отключения одного из пунктов настройки. Для того, чтобы получить перемнную окружения за пределами
функции настройки вебПака, можно использовать один из его плагинов DefinePlugin

После настройки конфига, его нужно джобавить в файл входа, чтобы смена языков начала работать.
Теперь все должно работать. Но поскольку мы собираемся подгружать языки асинхронно, нам необходимо 
все компоненты, использующие переводы, обернуть в suspense. Сделаем это один раз для всего
компонента. 

Далее приступим к тестированию того, что написали. Для этого создадим такой компонент:

const Component = () => {
  const {t, i18n} = useTranslation()

  return (
    <div>
      {t('Тестовый перевод')}
    </div>
  )
}

и подключим его в видимое место.

Теперь осталось добавить переводы и для этого, СЛЕДУЯ ДОКУМЕНТАЦИИ, создаем папку
locales в public, в которую пихаем различные языки (файл translation.json).

Далее в тестовый компонент добавляем кнопку смены языка.

Оказалось, что ничего не работает, т.к. импорт конфига нужно было добавлять
дефолтным способом:
import "shared/config/i18n/i18n";

После этого все работает.

Теперь добавим переводы для всех других фраз в нашем приложении (для других страниц) и 
после этого заметим, что все они тянуться единомоменто, что плохо влияет на производительность.
Для того, чтобы переводы тянулись кусками, разобъем файлы переводов на файлы, имеющие названия
страниц и потом, в хук useTranslation аргументом будем передавать названия страниц
