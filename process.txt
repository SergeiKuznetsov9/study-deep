  В этом уроке добавим реакт тестинг лайбрари

  npm install --save-dev @testing-library/react

  Далее, попробуем протестить кнопку на предет ее появления в ДОМе и окажется,
  что у объекта screen будет отсутствовать метод toBeInTheDocument()

  Для того, чтобы им пользоваться, нужно установиь дополнительный пакет:
  npm install --save-dev @testing-library/jest-dom
  и произвести всякие манипуляции согласно документации.

  После добавения в TSconfig следующей записи:
  
  "include": [
    "./config/jest/setupTests.ts"
  ],

  все сломается. Все дело в том, что, коль мы указали свойство include, то все, что в нем не
  указано - игнорируется. И поэтому нужно указать прочие файлы tsx:

  "./src/**/*.ts",
  "./src/**/*.tsx",

  Далее, если мы запускаем тесты, у нас все падает и тестовая библиотека рекомендует нам 
  использовать Babel для решения проблемы.

  Установим Бабель и Бабель-лоудер
  npm install --save-dev babel-loader @babel/core

  Далее добавим лоудер в webpack, установим пресет (позволяет распознавать ES6):
  npm install @babel/preset-env --save-dev

  И создадим файл babel.config.json с наполнением

  Вернемся к проблеме с тестами и установим еще один пресет для ее решения:
  npm install --save-dev @babel/preset-typescript

  После 

  Не получилось, устанавливаем еще пресет
  npm i -D @babel/preset-react

  Далее установим пакет
  npm install --save-dev identity-obj-proxy
  для возможности использоваь CSS в тестах

После этого напишем несколько тестов. Когда попроуем протестировать sideBar, получим
ошибку, т.к. не настрено использование тестовой библиотекой svg файлов. Сконфигурируем
jest.

Поскольку svg мы испортируем как компоненты, используем мапер:
    '\\.svg': path.resolve(__dirname, 'jestEmptyComponent.tsx'),

Здесь в качестве значения мы указали путь к файлу, который нужно создать и заполнить.
Это будет мок, который будет использоваться для всех импортов, в которых имеется 
расширение SVG. В данном файле будет функция, которая будет возвращать пустой блок

Теперь все работает, но тестовая среда ругается на useTranslation. Для решения обратимся
к документации и она предлагает использовать HOC withTranslation

После этого появляется новый ворнинг - о том, что мы не прокинули инстанс i18n

Все дел в том, что мы рендерим изолированный компонент, в котором хук перевода
отсутствует. Обратимся к документации и найдем раздел test without stubbing и
используем предложенный вариант

Чтобы не делать импорт данного файла в каждый тест, сделаем хелпер. Это будет
оберткой, которая будет добавлять нужную конфигурацию для переводов

Далее используем данную обертку, чтобы отрендерить тестовый компонент

Все, ворнингов нету

Напишем тест на разворачивание и сворачивание сайдбара