В этом уроке настраиваем дев сервер

Сейчас, в случае добавления кода и желании просмотреть измененияв сборке, нам
необходимо запускать сборку в ручную. Для того, чтобы сборка происходила автоматически
после изменений, нужно настроить девСервер

1. Добавим в конфиг вебПака строку devtool: 'inline-source-map'. Это нужно для того, чтобы
вебпак при сборке составлял карту исходного кода и при работе со сборкой в консоли 
можно было бы отследить на какой строке и в каком файле произошла ошибка

2.Далее установим вебпак дев сервер
npm i -D webpack-dev-server@4.7.4 @types/webpack-dev-server@4.7.2

3.Создадим файл buildDevServer. Настройка имеет множество полей.
port хотелось бы задавать на уровне buildOptions. Значение порта также будем в дальнейшем
получать из переменных окружения. Свойство open автоматически открывает вкладку в браузере
Вся инфа об этом девСервере находится в доке вебпака.

4.Далее, для удобного запуска сервера добавим скрипт в package.json

(((((Дев сервер не работал, пришлось обновить все зависимости, после этого все заработало)))))


5.Переходим к настройке переменных окружения, управлять которыми удобнео было бы на уровне
скриптов. Схема такая: при выполнении сборки при помощи флага env передается сколь угодно
много переменных окружения. Соответственно все это можно сделать в скрипте, который запускает
проект. В скрипт добавлены такие переменные, выглядит это так:
"build:prod": "webpack --env mode=production"
Здесь мы передали переменную окружения mode со значением production. Если еще что то нужно
передать, то передаем так: --env mode=production someVar=val и т.д. Главное, чтобы после
--env

6.Теперь эти переменные нужно получить в коде. Это просто. Конфиг вебпака превращается в
функцию, которая его и возвращает. Причем эта функция в качестве аргуента будет принимать
переменные окружения ({ WEBPACK_SERVE: true, port: '3000' }). Переменные окуржения тоже
нужно типизировать

7.Теперь мы завязываем мод и порт на переменные окружения

8.Ну и теперь на конкретном примере покажем как в режиме разработки/прода отключать те или
иные свойства. Так, в проде нам не нужно создавать карту кода для отслеживания ошибок, поэтому
в проде эту функцию отключим. Кроме того, в проде нам не нужен и девСервер













